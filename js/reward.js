// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram WebApp –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await new Promise(resolve => setTimeout(resolve, 1000));

        // –ü–æ–ª—É—á–∞–µ–º Telegram ID
        if (!window.tg?.initDataUnsafe?.user?.id) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return;
        }

        const currentTelegramId = window.tg.initDataUnsafe.user.id.toString();
        window.rewardData = { currentTelegramId }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–µ window

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userData = await window.db.getUserData(currentTelegramId);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if (!userData) {
            const username = window.tg?.initDataUnsafe?.user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            userData = await window.db.createNewUser(currentTelegramId, username);
            if (!userData) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return;
            }
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            const username = window.tg?.initDataUnsafe?.user?.username;
            if (username && username !== userData.username) {
                await window.db.updateUsername(currentTelegramId, username);
            }
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await window.db.syncLocalBalance(currentTelegramId);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        userData = await window.db.getUserData(currentTelegramId);
        if (!userData) return;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        await window.db.regenerateEnergy(currentTelegramId);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userData = await window.db.getUserData(currentTelegramId);
        if (!userData) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        if (typeof updateBalanceDisplay === 'function' && document.querySelector('.reward-section.active')) {
            updateBalanceDisplay(userData.balance);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        if (typeof updateEnergyDisplay === 'function' && document.querySelector('.reward-section.active')) {
            updateEnergyDisplay(userData.energy, userData.max_energy);
        }

        const rewardSection = document.getElementById('rewardSection');
        if (!rewardSection || !document.querySelector('.reward-section.active')) return;

        if (!rewardSection.querySelector('.reward-content')) {
            rewardSection.innerHTML = `
                <div class="dev-section">
                    <div class="dev-header">
                        <img src="https://i.postimg.cc/Y2PdgmFX/image.png" alt="Rewards">
                        <h2>–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥</h2>
                        <div class="dev-status">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
                    </div>
                    
                    <div class="dev-cards">
                        <div class="dev-card">
                            <div class="dev-card-icon">üèÜ</div>
                            <h3 class="dev-card-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                            <p class="dev-card-text">–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã</p>
                        </div>
                        <div class="dev-card">
                            <div class="dev-card-icon">üéÅ</div>
                            <h3 class="dev-card-title">–ë–æ–Ω—É—Å—ã</h3>
                            <p class="dev-card-text">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø–æ–¥–∞—Ä–∫–∏</p>
                        </div>
                        <div class="dev-card">
                            <div class="dev-card-icon">üìä</div>
                            <h3 class="dev-card-title">–†–µ–π—Ç–∏–Ω–≥</h3>
                            <p class="dev-card-text">–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏</p>
                        </div>
                    </div>
                    
                    <div class="dev-progress">
                        <div class="dev-progress-info">
                            <span class="dev-version">–í–µ—Ä—Å–∏—è 0.0.1</span>
                            <span class="dev-date">–î–æ —Ä–µ–ª–∏–∑–∞: 35 –¥–Ω–µ–π</span>
                        </div>
                        
                        <div class="dev-bar">
                            <div class="dev-bar-fill" style="width: 45%"></div>
                        </div>
                        
                        <div class="dev-stages">
                            <div class="dev-stage done">
                                <div class="dev-stage-dot"></div>
                                <span class="dev-stage-text">–î–∏–∑–∞–π–Ω</span>
                            </div>
                            <div class="dev-stage done">
                                <div class="dev-stage-dot"></div>
                                <span class="dev-stage-text">–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞</span>
                            </div>
                            <div class="dev-stage current">
                                <div class="dev-stage-dot"></div>
                                <span class="dev-stage-text">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                            </div>
                            <div class="dev-stage">
                                <div class="dev-stage-dot"></div>
                                <span class="dev-stage-text">–†–µ–ª–∏–∑</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≥—Ä–∞–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        if (document.querySelector('.reward-section.active')) {
            await updateRewardStatus();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
            setInterval(() => {
                if (document.querySelector('.reward-section.active')) {
                    updateRewardStatus();
                }
            }, 60000);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
            setInterval(async () => {
                if (document.querySelector('.reward-section.active')) {
                    await window.db.regenerateEnergy(currentTelegramId);
                    const updatedData = await window.db.getUserData(currentTelegramId);
                    if (updatedData && typeof updateEnergyDisplay === 'function') {
                        updateEnergyDisplay(updatedData.energy, updatedData.max_energy);
                    }
                }
            }, 60000);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});

function generateRewardDays() {
    const rewards = [
        { day: 1, amount: 1000 },
        { day: 2, amount: 5000 },
        { day: 3, amount: 10000 },
        { day: 4, amount: 50000 },
        { day: 5, amount: 100000 },
        { day: 6, amount: 250000 },
        { day: 7, amount: 500000 },
        { day: 8, amount: 1000000 }
    ];
    
    return rewards.map(reward => `
        <div class="reward-day" id="day${reward.day}">
            <h3>–î–µ–Ω—å ${reward.day}</h3>
            <div class="reward-amount">
                ${reward.amount.toString().replace(/\s+/g, '')} 
                <img src="https://i.postimg.cc/FFx7T4Bh/image.png" alt="–ë–∞–ª–∞–Ω—Å">
            </div>
            <button class="claim-button" onclick="claimReward(${reward.day}, ${reward.amount})">
                –ü–æ–ª—É—á–∏—Ç—å
            </button>
        </div>
    `).join('');
}

function formatTimeLeft(milliseconds) {
    const minutes = Math.floor(milliseconds / (1000 * 60));
    if (minutes > 0) {
        return `${minutes} –º–∏–Ω.`;
    } else {
        return '–ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã';
    }
}

async function updateRewardStatus() {
    const currentTelegramId = window.rewardData?.currentTelegramId;
    if (!currentTelegramId) return;

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    const userData = await window.db.getUserData(currentTelegramId);
    if (!userData) return;

    const now = Date.now();
    const timePassedSinceLastClaim = now - userData.last_claim_time;
    const timeLeft = 60 * 1000 - timePassedSinceLastClaim;
    const canClaim = timeLeft <= 0;
    
    for (let i = 1; i <= 8; i++) {
        const dayElement = document.getElementById(`day${i}`);
        if (!dayElement) continue;
        
        const claimButton = dayElement.querySelector('.claim-button');
        if (!claimButton) continue;
        
        if (i < userData.current_day) {
            dayElement.classList.add('claimed');
            claimButton.disabled = true;
            claimButton.textContent = '–ü–æ–ª—É—á–µ–Ω–æ';
        } else if (i > userData.current_day) {
            claimButton.disabled = true;
            claimButton.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        } else if (!canClaim) {
            claimButton.disabled = true;
            claimButton.textContent = `–ß–µ—Ä–µ–∑ ${formatTimeLeft(timeLeft)}`;
        } else {
            dayElement.classList.add('available');
            claimButton.disabled = false;
            claimButton.textContent = '–ü–æ–ª—É—á–∏—Ç—å';
        }
    }
}

async function claimReward(day, amount) {
    const currentTelegramId = window.rewardData?.currentTelegramId;
    if (!currentTelegramId) {
        console.error('–ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
        return;
    }
    
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã. –î–µ–Ω—å:', day, '–°—É–º–º–∞:', amount);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    const userData = await window.db.getUserData(currentTelegramId);
    if (!userData) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
    
    if (day !== userData.current_day) {
        console.log('–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã');
        return;
    }
    
    const now = Date.now();
    const timePassedSinceLastClaim = now - userData.last_claim_time;
    const timeLeft = 60 * 1000 - timePassedSinceLastClaim;
    
    if (timeLeft > 0) {
        console.log('–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:', timeLeft);
        showNotification(`–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ${formatTimeLeft(timeLeft)}`, 'info');
        return;
    }

    const newBalance = userData.balance + amount;
    console.log('–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', newBalance);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const success = await window.db.updateUserBalance(currentTelegramId, newBalance);
    if (!success) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã', 'error');
        return;
    }
    
    console.log('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    const newDay = Math.min(userData.current_day + 1, 8);
    console.log('–ù–æ–≤—ã–π –¥–µ–Ω—å:', newDay);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–≥—Ä–∞–¥
    const rewardSuccess = await window.db.updateUserRewards(currentTelegramId, newDay, now);
    if (!rewardSuccess) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–≥—Ä–∞–¥');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≥—Ä–∞–¥
    await updateRewardStatus();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${amount.toString().replace(/\s+/g, '')} –º–æ–Ω–µ—Ç!`, 'success');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    if (typeof updateBalanceDisplay === 'function') {
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', newBalance);
        updateBalanceDisplay(newBalance);
    } else {
        console.error('–§—É–Ω–∫—Ü–∏—è updateBalanceDisplay –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
function switchRewardSection(section) {
    const cards = document.querySelectorAll('.nav-card');
    cards.forEach(card => card.classList.remove('active'));
    
    const selectedCard = document.querySelector(`.nav-card[onclick*="${section}"]`);
    if (selectedCard) {
        selectedCard.classList.add('active');
    }
    
    if (section !== 'daily') {
        showNotification('–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }
} 